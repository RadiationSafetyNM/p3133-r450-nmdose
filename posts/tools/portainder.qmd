---
title: "Docker"
description: "Ubuntu에 Docker 설치 및 사용법"
author: "BenKorea"
date: "2025-03-09"
date-modified: last-modified
categories: [docker]
---


공식도커사이트(https://docs.docker.com/engine/install/ubuntu/) 내용을 참고하여 진행함

## 사전 준비

### 방화벽 제한 사항
어려워서 패스

> **⚠️ 주의**  
> `ufw` 또는 `firewalld`를 사용하여 방화벽을 관리하는 경우, Docker를 통해 컨테이너 포트를 노출하면 방화벽 규칙을 우회할 수 있습니다. 자세한 내용은 [Docker와 ufw](https://docs.docker.com/network/iptables/) 문서를 참고하세요.
>
> Docker는 `iptables-nft` 및 `iptables-legacy`만 지원합니다. `nft`를 사용하여 생성한 방화벽 규칙은 Docker에서 동작하지 않습니다. 방화벽 규칙을 적용하려면 `iptables` 또는 `ip6tables`를 사용해야 하며, `DOCKER-USER` 체인에 추가해야 합니다. 자세한 내용은 [패킷 필터링 및 방화벽](https://docs.docker.com/network/packet-filtering-firewalls/) 문서를 참고하세요.

### 운영체제 요구 사항

Docker Engine을 설치하려면 다음 중 하나의 64비트 우분투(Ubuntu) 버전이 필요합니다.

- `Ubuntu Oracular 24.10`
- `Ubuntu Noble 24.04 (LTS)`
- `Ubuntu Jammy 22.04 (LTS)`
- `Ubuntu Focal 20.04 (LTS)`

Docker Engine은 다음 아키텍처를 지원합니다: `x86_64 (amd64)`, `armhf`, `arm64`, `s390x`, `ppc64le (ppc64el)`

> **📌 참고:**  
> Ubuntu 기반 배포판(예: Linux Mint)은 공식적으로 지원되지 않습니다.

---

## 이전 버전 제거

Docker Engine을 설치하기 전에 충돌을 방지하기 위해 기존의 비공식 Docker 패키지를 제거해야 합니다.

### 제거해야 하는 패키지 목록:

- `docker.io`
- `docker-compose`
- `docker-compose-v2`
- `docker-doc`
- `podman-docker`
- `containerd`
- `runc`

for 명령어를 사용하면 한줄의 명령어로 모두 제거할 수 있습니다.

```{r uninstall_conflicting_packages, eval=FALSE, filename="Bash"}
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
```

완벽제거를 위해서는 다음의 문서를 참고하세요. [Docker Engine 설치하기 전에 기존 Docker 제거하기](https://docs.docker.com/engine/install/ubuntu/#uninstall-old-versions)


## 설치
여러가지 설치방법이 있으나 여기서는 apt를 이용한 방법으로 진행

### Set up Docker's apt repository.

```{r GPG_key, eval=FALSE, filename="Bash"}
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
```

- ca-certificates: SSL 인증서를 관리하는 패키지로, HTTPS 연결을 신뢰할 수 있도록 설정합니다.
- curl: 인터넷에서 파일을 다운로드할 수 있도록 하는 명령줄 도구입니다.
- install -m 0755 -d /etc/apt/keyrings
    - m 0755: 디렉토리의 권한을 0755(소유자는 읽기/쓰기/실행 가능, 다른 사용자는 읽기/실행 가능)로 설정
    - d: 디렉토리를 생성하는 옵션
- f: 요청 실패 시 에러 메시지를 출력
- s: 진행 상태 메시지를 출력하지 않음
- S: -s 옵션과 함께 사용하여 오류 발생 시 메시지를 출력
- L: 리디렉션이 있는 경우 최종 목적지까지 따라감
다운로드된 GPG 키는 /etc/apt/keyrings/docker.asc에 저장됩니다.
chmod a+r /etc/apt/keyrings/docker.asc
a+r: 모든 사용자(a: all users)에게 읽기(r: read) 권한을 부여
이 설정이 없으면 apt가 GPG 키를 읽을 수 없기 때문에 저장소 검증이 실패할 수 있습니다.

```{r adding_repository, eval=FALSE, filename="Bash"}
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
```
- deb [옵션] 저장소URL 배포판코드네임 [섹션]의 문법을 따릅니다.
- deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc]
    - deb: 패키지 저장소를 추가하는 명령어
    - arch=$(dpkg --print-architecture): 현재 시스템의 아키텍처를 출력하는 명령어
    - signed-by=/etc/apt/keyrings/docker.asc: GPG 키를 사용하여 저장소를 검증
- https://download.docker.com/linux/ubuntu
    - 도커 공식 저장소 주소
- $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable:
    - /etc/os-release: 환경변수를 load
    - && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}"): CODENAME이 없으면 VERSION_CODENAME을 출력
- sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - tee: 파일에 입력한 내용을 출력하고 파일에 저장
    - /dev/null: 화면 출력을 무시
    
### Install the Docker packages.

```{r installng_docker_packages, eval=FALSE, filename="Bash"}
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

### Verifying by hello-world

```{r verifying, eval=FALSE, filename="Bash"}
sudo docker run hello-world
```

## Portainer 설치

### Portainer 개념

**Portainer**는 Docker 및 Kubernetes 컨테이너 관리를 위한 **웹 기반 UI** 도구입니다.  
CLI(Command Line Interface) 없이도 **컨테이너, 이미지, 네트워크, 볼륨 등을 손쉽게 관리**할 수 있습니다.

#### 🔹 주요 기능
- **컨테이너 관리**: 실행, 중지, 삭제, 로그 확인
- **이미지 관리**: 이미지 다운로드, 삭제, 태그 지정
- **네트워크 및 볼륨 관리**: 컨테이너 간 네트워크 설정 및 데이터 볼륨 관리
- **사용자 및 액세스 제어**: 여러 사용자와 권한 설정 가능
- **Swarm 및 Kubernetes 지원**: Docker Swarm과 Kubernetes 클러스터 관리 가능

---

### Portainer 설치 방법

Portainer는 Docker 컨테이너로 실행되므로, Docker가 설치되어 있어야 합니다.  

#### 볼륨 생성
Portainer의 설정 및 데이터는 **볼륨(volume)**에 저장됩니다.

```{r portainer_create, eval=FALSE, filename="Bash"}
docker volume create portainer_data
```

#### Portainer 컨테이너 실행**
이는 원격으로 이미지다운로드를 포함한다.
```{r portainer_run, eval=FALSE, filename="Bash"}
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce
```

- `-d`: 백그라운드에서 컨테이너 실행
- `-p 8000:8000 -p 9000:9000`: 호스트 포트와 컨테이너 포트 매핑
- `--name=portainer`: 컨테이너 이름 지정
- `--restart=always`: 컨테이너가 종료되면 자동으로 재시작
- `-v /var/run/docker.sock:/var/run/docker.sock`: 호스트의 Docker 소켓을 컨테이너 내부로 연결
- `-v portainer_data:/data`: Portainer 설정 및 데이터를 저장할 볼륨 연결
- `portainer/portainer-ce`: Portainer 컨테이너 이미지


#### 실행중인 container 확인
```{r portainer_check, eval=FALSE, filename="Bash"}
docker ps
```

#### Portainer 제거
```{r portainer_remove, eval=FALSE, filename="Bash"}
docker stop portainer
docker rm -f portainer
```

#### 로그인 id & password
ben
benjamin060318


### docker-compose
Docker Compose는 다중 컨테이너 애플리케이션을 정의하고 실행하기 위한 도구입니다. 이 도구를 활용하면 개발 및 배포 과정을 간소화하고 효율적으로 관리할 수 있습니다.

Compose를 사용하면 하나의 이해하기 쉬운 YAML 구성 파일 내에서 서비스, 네트워크, 볼륨 등을 포함한 전체 애플리케이션 스택을 손쉽게 관리할 수 있습니다. 단 한 개의 명령어로 구성 파일에 명시된 모든 서비스를 생성하고 실행할 수 있다는 점이 큰 장점입니다.

Docker Compose는 프로덕션, 스테이징, 개발, 테스트 환경은 물론 CI 워크플로우 등 다양한 환경에서 활용될 수 있습니다. 또한, 전체 애플리케이션의 라이프사이클을 관리하기 위한 명령어들을 제공하여,

서비스 시작, 중지, 재구축
실행 중인 서비스의 상태 확인
실행 중인 서비스의 로그 출력 스트리밍
서비스에 대한 일회성 명령 실행
등의 작업을 손쉽게 수행할 수 있습니다.

#### 설치

```{r docker_compose, eval=FALSE, filename="Bash"}
sudo apt-get install docker-compose
```

```{r docker_compose_version, eval=FALSE, filename="Bash"}
docker-compose --version
```

####  프로젝트 만들기
/home/user/docker-compose-test 디렉토리를 생성하고, 해당 디렉토리로 이동합니다.

#### docker-compose.yml 파일 작성

```{r docker_compose_yml, eval=FALSE, filename="docker-compose.yml"}
version: '3'

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "8000:8000"  # Portainer Agent 통신용
      - "9000:9000"  # Portainer 웹 UI 접속용 (http://localhost:9000)
      - "9443:9443"  # HTTPS 접속용
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  portainer_data:
```

#### 실행

```{r docker_compose_portainer, eval=FALSE, filename="Bash"}
docker compose up -d
```







